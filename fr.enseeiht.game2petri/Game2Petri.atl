module Game2Petri;
create OUT: petrinet from IN: game;

-- Traduire un jeu en un PetriNet de même nom
rule Jeu2PetriNet {
	from
		g: game!Jeu
	to
		pn: petrinet!PetriNet (
			name <- g.name
		)
	do{
		pn.Element <- petrinet!Place.allInstances();
		pn.Element <- petrinet!Arc.allInstances();
		pn.Element <- petrinet!Transition.allInstances();
		}
}

-- Traduire un Lieu en un motif sur le réseau de Petri
rule Lieu2PetriNet {
	from
		l: game!Lieu
	to
		p_lieu: petrinet!Place (
			name <- l.name
		)
}

-- Traduire une Personne en un motif sur le réseau de Petri
rule Personne2PetriNet {
	from
		p: game!Personne
	to
		p_personne: petrinet!Place (
			name <- p.name
		),
		t_interaction: petrinet!Transition (
			name <- p.name + 'interaction'
		),
		arc_interaction1: petrinet!Arc (
			weight <- 1,
			type <- #Normal,
			from <- p_personne,
			to <- t_interaction
		)
	do {
		for (c in p.interaction.choix){
				thisModule.aux2(t_interaction, c);					
			}
	}
}

-- Traduire une Interaction en un motif sur le réseau de Petri
rule aux2(t: petrinet!Transition, c: game!choix){
	to
		arc_interaction2: petrinet!Arc (
			weight <- 1,
			type <- #Normal,
			from <- t,
			to <- thisModule.resolveTemp(c, 'p_choix')
		)
}

-- Traduire une Action en un motif sur le réseau de Petri
rule Action2PetriNet {
	from
		action: game!Action
	to
		p_action: petrinet!Place (
			name <- action.name
		)
}

-- Traduire un Choix en un motif sur le réseau de Petri
rule Choix2PetriNet {
	from
		choix: game!Choix
	to
		p_choix: petrinet!Place (
			name <- choix.name
		)
	do {
		for(a in choix.actions){
			thisModule.aux1(p_choix, a);
		}
	}
}

rule aux1(c: petrinet!Place, a: game!Action){
	to
		t_aux1: petrinet!Transition (
			name <- c.name + a.name
		),
		arc_aux1: petrinet!Arc (
			weight <- 1,
			type <- #Normal,
			from <- c,
			to <- t_aux1
		),
		arc_aux2: petrinet!Arc (
			weight <- 1,
			type <- #Normal,
			from <- t_aux1,
			to <- thisModule.resolveTemp(a, 'p_action')
		)		
}

-- Traduire une Condition en un motif sur le réseau de Petri
rule Condition2PetriNet {
	from
		condition: game!Condition
	to
	do {
		for (o in condition.objets){
			thisModule.aux3(o);
		}
		for (c in condition.connaissances){
			thisModule.aux4(c);
		}
	}
}

rule aux3(o: game!Objet){
	to
		p_condition_objet: petrinet!Place (
			name <- o.name + 'Manquante'
		)
}

rule aux4(c: game!Connaissance){
	to
		p_condition_connaissance: petrinet!Place (
			name <- c.name + 'Possedee'
		)
}

-- Traduire un Explorqteur en un motif sur le réseau de Petri
rule Explorateur2PetriNet {
	from
		e: game!Explorateur
	to
		p_explorateur: petrinet!Place (
			name <- 'start',
			token <- 1
		)
}
